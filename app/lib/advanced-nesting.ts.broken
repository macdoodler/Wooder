// Enhanced nesting algorithm for better material utilization
// This file contains improved algorithms for 2D bin packing

export interface Rectangle {
  width: number;
  height: number;
  x: number;
  y: number;
  id?: string;
}

export interface InputRectangle {
  width: number;
  height: number;
  id?: string;
}

export interface PackingResult {
  placed: Rectangle[];
  efficiency: number;
  waste: number;
}

/**
 * CRITICAL: Validate placement to prevent duplicate positions
 * This function ensures NO parts are ever placed at identical coordinates
 */
function validateNewPlacement(
  newPlacement: { x: number; y: number; width: number; height: number },
  existingPlacements: Rectangle[]
): boolean {
  // Check for exact duplicate positions (most critical issue)
  for (const existing of existingPlacements) {
    if (existing.x === newPlacement.x && existing.y === newPlacement.y) {
      console.error(`[ADVANCED_NESTING] CRITICAL: Attempted to place part at duplicate position (${newPlacement.x}, ${newPlacement.y})`);
      console.error(`[ADVANCED_NESTING] Existing part already at this position. This would cause overlapping cuts!`);
      return false;
    }
  }
  return true;
}

/**
 * Bottom-Left Fill (BLF) algorithm with improved space management
 * Places parts as far down and left as possible for optimal nesting
 */
export function bottomLeftFill(
  parts: InputRectangle[],
  sheetWidth: number,
  sheetHeight: number,
  kerf: number = 0
): PackingResult {
  const placed: Rectangle[] = [];
  const sortedParts = [...parts].sort((a, b) => {
    // Sort by area (largest first), then by longest dimension
    const areaA = a.width * a.height;
    const areaB = b.width * b.height;
    if (areaA !== areaB) return areaB - areaA;
    return Math.max(b.width, b.height) - Math.max(a.width, a.height);
  });

  for (const part of sortedParts) {
    const position = findOptimalPosition(part, placed, sheetWidth, sheetHeight, kerf);
    if (position) {
      // ===== CRITICAL VALIDATION: Prevent duplicate positions =====
      if (validateNewPlacement(position, placed)) {
        placed.push({
          ...part,
          x: position.x,
          y: position.y,
          width: position.width,
          height: position.height
        });
      } else {
        console.error(`[BOTTOM_LEFT_FILL] Skipping part ${part.id} due to duplicate position conflict`);
      }
    }
  }

  const usedArea = placed.reduce((sum, rect) => sum + rect.width * rect.height, 0);
  const totalArea = sheetWidth * sheetHeight;
  const efficiency = (usedArea / totalArea) * 100;

  return {
    placed,
    efficiency,
    waste: totalArea - usedArea
  };
}

/**
 * Find the optimal position for a part using advanced strategies
 * Uses multiple criteria: bottom-left preference, skyline minimization, and compactness
 */
function findOptimalPosition(
  part: InputRectangle,
  placed: Rectangle[],
  sheetWidth: number,
  sheetHeight: number,
  kerf: number
): { x: number; y: number; width: number; height: number } | null {
  const orientations = [
    { width: part.width, height: part.height },
    { width: part.height, height: part.width } // rotated
  ];

  let bestPosition: { x: number; y: number; width: number; height: number } | null = null;
  let bestScore = Infinity;

  for (const orientation of orientations) {
    const adjustedWidth = orientation.width + kerf;
    const adjustedHeight = orientation.height + kerf;

    // Check if it fits in the sheet
    if (adjustedWidth > sheetWidth || adjustedHeight > sheetHeight) continue;

    // Generate candidate positions based on existing placements
    const candidates = generateCandidatePositions(
      adjustedWidth, 
      adjustedHeight, 
      placed, 
      sheetWidth, 
      sheetHeight
    );

    for (const candidate of candidates) {
      const testRect = { 
        x: candidate.x, 
        y: candidate.y, 
        width: adjustedWidth, 
        height: adjustedHeight 
      };
      
      if (!hasCollision(testRect, placed, kerf)) {
        // Calculate comprehensive score
        const score = calculatePositionScore(
          candidate.x, 
          candidate.y, 
          adjustedWidth, 
          adjustedHeight, 
          placed, 
          sheetWidth, 
          sheetHeight
        );
        
        if (score < bestScore) {
          bestScore = score;
          bestPosition = {
            x: candidate.x,
            y: candidate.y,
            width: orientation.width,
            height: orientation.height
          };
        }
      }
    }
  }

  return bestPosition;
}

/**
 * Generate intelligent candidate positions based on existing placements
 */
function generateCandidatePositions(
  width: number,
  height: number,
  placed: Rectangle[],
  sheetWidth: number,
  sheetHeight: number
): Array<{ x: number; y: number }> {
  const candidates: Array<{ x: number; y: number }> = [];
  
  // Always try origin
  candidates.push({ x: 0, y: 0 });

  // For each placed rectangle, try positions adjacent to it
  for (const rect of placed) {
    // Right edge positions
    if (rect.x + rect.width + width <= sheetWidth) {
      candidates.push({ x: rect.x + rect.width, y: rect.y });
      // Also try bottom-aligned with the placed rectangle
      if (rect.y + rect.height >= height) {
        candidates.push({ x: rect.x + rect.width, y: rect.y + rect.height - height });
      }
    }

    // Top edge positions  
    if (rect.y + rect.height + height <= sheetHeight) {
      candidates.push({ x: rect.x, y: rect.y + rect.height });
      // Also try right-aligned with the placed rectangle
      if (rect.x + rect.width >= width) {
        candidates.push({ x: rect.x + rect.width - width, y: rect.y + rect.height });
      }
    }

    // Corner positions (top-right of existing rectangles)
    if (rect.x + rect.width + width <= sheetWidth && 
        rect.y + rect.height + height <= sheetHeight) {
      candidates.push({ x: rect.x + rect.width, y: rect.y + rect.height });
    }
  }

  // Remove duplicates and invalid positions
  const uniqueCandidates = Array.from(
    new Set(candidates.map(c => `${c.x},${c.y}`))
  ).map(coord => {
    const [x, y] = coord.split(',').map(Number);
    return { x, y };
  }).filter(c => 
    c.x >= 0 && c.y >= 0 && 
    c.x + width <= sheetWidth && 
    c.y + height <= sheetHeight
  );

  return uniqueCandidates;
}

/**
 * Calculate a comprehensive score for a position
 * Lower scores are better
 */
function calculatePositionScore(
  x: number,
  y: number,
  width: number,
  height: number,
  placed: Rectangle[],
  sheetWidth: number,
  sheetHeight: number
): number {
  let score = 0;

  // Bottom-left preference (heavily weighted)
  score += y * 1000 + x * 10;

  // Skyline penalty - prefer positions that minimize skyline irregularity
  const skylinePenalty = calculateSkylinePenalty(x, y, width, height, placed, sheetWidth);
  score += skylinePenalty * 500;

  // Contact penalty - prefer positions with more contact with existing rectangles
  const contactBonus = calculateContactBonus(x, y, width, height, placed);
  score -= contactBonus * 200;

  // Waste penalty - prefer positions that create less unusable waste
  const wastePenalty = calculateWastePenalty(x, y, width, height, placed, sheetWidth, sheetHeight);
  score += wastePenalty * 100;

  return score;
}

/**
 * Calculate skyline penalty to encourage smooth skylines
 */
function calculateSkylinePenalty(
  x: number,
  y: number,
  width: number,
  height: number,
  placed: Rectangle[],
  sheetWidth: number
): number {
  // Create skyline array
  const skyline = new Array(Math.ceil(sheetWidth)).fill(0);
  
  for (const rect of placed) {
    for (let i = Math.floor(rect.x); i < Math.min(Math.ceil(rect.x + rect.width), sheetWidth); i++) {
      skyline[i] = Math.max(skyline[i], rect.y + rect.height);
    }
  }

  // Calculate how much this placement would increase skyline variation
  let penalty = 0;
  const newTop = y + height;
  
  for (let i = Math.floor(x); i < Math.min(Math.ceil(x + width), sheetWidth); i++) {
    if (skyline[i] < newTop) {
      // Check variation with neighbors
      const leftHeight = i > 0 ? skyline[i - 1] : 0;
      const rightHeight = i < sheetWidth - 1 ? skyline[i + 1] : 0;
      const variation = Math.abs(newTop - leftHeight) + Math.abs(newTop - rightHeight);
      penalty += variation;
    }
  }

  return penalty;
}

/**
 * Calculate contact bonus - reward positions that touch existing rectangles
 */
function calculateContactBonus(
  x: number,
  y: number,
  width: number,
  height: number,
  placed: Rectangle[]
): number {
  let bonus = 0;

  for (const rect of placed) {
    // Check for edge contact
    if (Math.abs(x + width - rect.x) < 0.1 && 
        !(y + height <= rect.y || y >= rect.y + rect.height)) {
      bonus += Math.min(height, rect.height); // Right edge contact
    }
    if (Math.abs(x - (rect.x + rect.width)) < 0.1 && 
        !(y + height <= rect.y || y >= rect.y + rect.height)) {
      bonus += Math.min(height, rect.height); // Left edge contact  
    }
    if (Math.abs(y + height - rect.y) < 0.1 && 
        !(x + width <= rect.x || x >= rect.x + rect.width)) {
      bonus += Math.min(width, rect.width); // Top edge contact
    }
    if (Math.abs(y - (rect.y + rect.height)) < 0.1 && 
        !(x + width <= rect.x || x >= rect.x + rect.width)) {
      bonus += Math.min(width, rect.width); // Bottom edge contact
    }
  }

  return bonus;
}

/**
 * Calculate waste penalty based on unusable spaces created
 */
function calculateWastePenalty(
  x: number,
  y: number,
  width: number,
  height: number,
  placed: Rectangle[],
  sheetWidth: number,
  sheetHeight: number
): number {
  // For now, simple implementation based on fragmentation
  // Could be enhanced to analyze actual unusable pockets
  
  // Penalty for creating small gaps
  let penalty = 0;
  
  // Check for small horizontal gaps
  if (x > 0) {
    let foundSupport = false;
    for (const rect of placed) {
      if (rect.x + rect.width === x && 
          !(y + height <= rect.y || y >= rect.y + rect.height)) {
        foundSupport = true;
        break;
      }
    }
    if (!foundSupport) {
      penalty += x * 0.1; // Penalty for unsupported left gap
    }
  }

  // Check for small vertical gaps
  if (y > 0) {
    let foundSupport = false;
    for (const rect of placed) {
      if (rect.y + rect.height === y && 
          !(x + width <= rect.x || x >= rect.x + rect.width)) {
        foundSupport = true;
        break;
      }
    }
    if (!foundSupport) {
      penalty += y * 0.1; // Penalty for unsupported bottom gap
    }
  }

  return penalty;
}

/**
 * Improved shelf-based algorithm for rectangular parts
 */
export function shelfBestFit(
  parts: InputRectangle[],
  sheetWidth: number,
  sheetHeight: number,
  kerf: number = 0
): PackingResult {
  const placed: Rectangle[] = [];
  const shelves: Array<{ y: number; height: number; remainingWidth: number }> = [];
  
  // Sort parts by height (tallest first), then by width
  const sortedParts = [...parts].sort((a, b) => {
    if (a.height !== b.height) return b.height - a.height;
    return b.width - a.width;
  });

  for (const part of sortedParts) {
    const orientations = [
      { width: part.width, height: part.height },
      { width: part.height, height: part.width }
    ];

    let placed_part = false;

    for (const orientation of orientations) {
      if (placed_part) break;

      const adjustedWidth = orientation.width + kerf;
      const adjustedHeight = orientation.height + kerf;

      // Try to place on existing shelves
      for (const shelf of shelves) {
        if (adjustedWidth <= shelf.remainingWidth && adjustedHeight <= shelf.height) {
          const x = sheetWidth - shelf.remainingWidth;
          const proposedPlacement = {
            x,
            y: shelf.y,
            width: orientation.width,
            height: orientation.height
          };
          
          // ===== CRITICAL VALIDATION: Prevent duplicate positions =====
          if (validateNewPlacement(proposedPlacement, placed)) {
            placed.push({
              ...part,
              ...proposedPlacement
            });
            shelf.remainingWidth -= adjustedWidth;
            placed_part = true;
            break;
          } else {
            console.error(`[SHELF_BEST_FIT] Skipping shelf placement due to duplicate position conflict`);
          }
        }
      }

      // Create new shelf if no existing shelf works
      if (!placed_part) {
        const totalShelfHeight = shelves.reduce((sum, s) => Math.max(sum, s.y + s.height), 0);
        if (totalShelfHeight + adjustedHeight <= sheetHeight && adjustedWidth <= sheetWidth) {
          const proposedPlacement = {
            x: 0,
            y: totalShelfHeight,
            width: orientation.width,
            height: orientation.height
          };
          
          // ===== CRITICAL VALIDATION: Prevent duplicate positions =====
          if (validateNewPlacement(proposedPlacement, placed)) {
            const newShelf = {
              y: totalShelfHeight,
              height: adjustedHeight,
              remainingWidth: sheetWidth - adjustedWidth
            };
            shelves.push(newShelf);
            placed.push({
              ...part,
              ...proposedPlacement
            });
            placed_part = true;
          } else {
            console.error(`[SHELF_BEST_FIT] Skipping new shelf due to duplicate position conflict`);
          }
        }
      }
    }
  }

  const usedArea = placed.reduce((sum, rect) => sum + rect.width * rect.height, 0);
  const totalArea = sheetWidth * sheetHeight;
  const efficiency = (usedArea / totalArea) * 100;

  return {
    placed,
    efficiency,
    waste: totalArea - usedArea
  };
}

/**
 * Hybrid algorithm that tries multiple strategies and picks the best
 */
export function hybridPacking(
  parts: InputRectangle[],
  sheetWidth: number,
  sheetHeight: number,
  kerf: number = 0
): PackingResult {
  const algorithms = [
    () => bottomLeftFill(parts, sheetWidth, sheetHeight, kerf),
    () => shelfBestFit(parts, sheetWidth, sheetHeight, kerf),
    () => maximalRectanglePacking(parts, sheetWidth, sheetHeight, kerf),
    // Try with different part sorting strategies
    () => bottomLeftFill(
      [...parts].sort((a, b) => b.width - a.width), // width-first
      sheetWidth, sheetHeight, kerf
    ),
    () => bottomLeftFill(
      [...parts].sort((a, b) => b.height - a.height), // height-first
      sheetWidth, sheetHeight, kerf
    ),
    // Try maximal rectangle with different orientations
    () => maximalRectanglePacking(
      [...parts].sort((a, b) => (b.height * b.width) - (a.height * a.width)),
      sheetWidth, sheetHeight, kerf
    )
  ];

  let bestResult: PackingResult = { placed: [], efficiency: 0, waste: Infinity };

  for (const algorithm of algorithms) {
    const result = algorithm();
    if (result.efficiency > bestResult.efficiency) {
      bestResult = result;
    }
  }

  return bestResult;
}

/**
 * Maximal Rectangle algorithm - specifically designed for maximum space utilization
 * This algorithm attempts multiple layout strategies and picks the most efficient one
 */
export function maximalRectanglePacking(
  parts: InputRectangle[],
  sheetWidth: number,
  sheetHeight: number,
  kerf: number = 0
): PackingResult {
  const strategies = [
    () => packByLargestFirst(parts, sheetWidth, sheetHeight, kerf),
    () => packByAspectRatio(parts, sheetWidth, sheetHeight, kerf),
    () => packByOptimalRows(parts, sheetWidth, sheetHeight, kerf),
    () => packByBestFitDecreasing(parts, sheetWidth, sheetHeight, kerf)
  ];

  let bestResult: PackingResult = { placed: [], efficiency: 0, waste: Infinity };

  for (const strategy of strategies) {
    const result = strategy();
    if (result.efficiency > bestResult.efficiency) {
      bestResult = result;
    }
  }

  return bestResult;
}

/**
 * Pack by largest parts first with optimal positioning
 */
function packByLargestFirst(
  parts: InputRectangle[],
  sheetWidth: number,
  sheetHeight: number,
  kerf: number
): PackingResult {
  const placed: Rectangle[] = [];
  const sortedParts = [...parts].sort((a, b) => (b.width * b.height) - (a.width * a.height));

  for (const part of sortedParts) {
    const position = findBestFitPosition(part, placed, sheetWidth, sheetHeight, kerf);
    if (position) {
      // ===== CRITICAL VALIDATION: Prevent duplicate positions =====
      if (validateNewPlacement(position, placed)) {
        placed.push({
          ...part,
          x: position.x,
          y: position.y,
          width: position.width,
          height: position.height
        });
      } else {
        console.error(`[PACK_BY_LARGEST_FIRST] Skipping part ${part.id} due to duplicate position conflict`);
      }
    }
  }

  const usedArea = placed.reduce((sum, rect) => sum + rect.width * rect.height, 0);
  const totalArea = sheetWidth * sheetHeight;
  const efficiency = (usedArea / totalArea) * 100;

  return { placed, efficiency, waste: totalArea - usedArea };
}

/**
 * Pack by aspect ratio similarity
 */
function packByAspectRatio(
  parts: InputRectangle[],
  sheetWidth: number,
  sheetHeight: number,
  kerf: number
): PackingResult {
  const placed: Rectangle[] = [];
  const sheetAspectRatio = sheetWidth / sheetHeight;
  
  const sortedParts = [...parts].sort((a, b) => {
    const aspectA = Math.abs((a.width / a.height) - sheetAspectRatio);
    const aspectB = Math.abs((b.width / b.height) - sheetAspectRatio);
    return aspectA - aspectB;
  });

  for (const part of sortedParts) {
    const position = findBestFitPosition(part, placed, sheetWidth, sheetHeight, kerf);
    if (position) {
      // ===== CRITICAL VALIDATION: Prevent duplicate positions =====
      if (validateNewPlacement(position, placed)) {
        placed.push({
          ...part,
          x: position.x,
          y: position.y,
          width: position.width,
          height: position.height
        });
      } else {
        console.error(`[PACK_BY_ASPECT_RATIO] Skipping part ${part.id} due to duplicate position conflict`);
      }
    }
  }

  const usedArea = placed.reduce((sum, rect) => sum + rect.width * rect.height, 0);
  const totalArea = sheetWidth * sheetHeight;
  const efficiency = (usedArea / totalArea) * 100;

  return { placed, efficiency, waste: totalArea - usedArea };
}

/**
 * Pack by creating optimal rows
 */
function packByOptimalRows(
  parts: InputRectangle[],
  sheetWidth: number,
  sheetHeight: number,
  kerf: number
): PackingResult {
  const placed: Rectangle[] = [];
  const availableParts = [...parts];
  let currentY = 0;

  while (availableParts.length > 0 && currentY < sheetHeight) {
    // Find the best combination for this row
    const row = findOptimalRowCombination(availableParts, sheetWidth, sheetHeight - currentY, kerf);
    
    if (row.length === 0) break; // No more parts fit

    // Place parts in this row
    let currentX = 0;
    let rowHeight = 0;
    
    for (const partIndex of row) {
      const part = availableParts[partIndex];
      const adjustedWidth = part.width + kerf;
      const adjustedHeight = part.height + kerf;
      
      const proposedPlacement = {
        x: currentX,
        y: currentY,
        width: part.width,
        height: part.height
      };
      
      // ===== CRITICAL VALIDATION: Prevent duplicate positions =====
      if (validateNewPlacement(proposedPlacement, placed)) {
        placed.push({
          ...part,
          ...proposedPlacement
        });
        
        currentX += adjustedWidth;
        rowHeight = Math.max(rowHeight, adjustedHeight);
      } else {
        console.error(`[PACK_BY_OPTIMAL_ROWS] Skipping part ${part.id} due to duplicate position conflict`);
      }
    }

    // Remove used parts (in reverse order to maintain indices)
    row.sort((a, b) => b - a).forEach(index => availableParts.splice(index, 1));
    currentY += rowHeight;
        y: currentY,
        width: part.width,
        height: part.height
      });
      
      currentX += adjustedWidth;
      rowHeight = Math.max(rowHeight, adjustedHeight);
    }

    // Remove used parts (in reverse order to maintain indices)
    row.sort((a, b) => b - a).forEach(index => availableParts.splice(index, 1));
    currentY += rowHeight;
  }

  const usedArea = placed.reduce((sum, rect) => sum + rect.width * rect.height, 0);
  const totalArea = sheetWidth * sheetHeight;
  const efficiency = (usedArea / totalArea) * 100;

  return { placed, efficiency, waste: totalArea - usedArea };
}

/**
 * Find the optimal combination of parts for a row
 */
function findOptimalRowCombination(
  parts: InputRectangle[],
  maxWidth: number,
  maxHeight: number,
  kerf: number
): number[] {
  const dp: { indices: number[], width: number, efficiency: number }[] = [
    { indices: [], width: 0, efficiency: 0 }
  ];

  for (let i = 0; i < parts.length; i++) {
    const part = parts[i];
    const adjustedWidth = part.width + kerf;
    const adjustedHeight = part.height + kerf;
    
    if (adjustedHeight > maxHeight) continue;

    const newStates: typeof dp = [];
    
    for (const state of dp) {
      if (state.width + adjustedWidth <= maxWidth) {
        const newArea = state.efficiency * state.width + part.width * part.height;
        const newWidth = state.width + adjustedWidth;
        const newEfficiency = newWidth > 0 ? newArea / newWidth : 0;
        
        newStates.push({
          indices: [...state.indices, i],
          width: newWidth,
          efficiency: newEfficiency
        });
      }
    }
    
    dp.push(...newStates);
  }

  // Find the combination with the best efficiency
  let bestCombination: number[] = [];
  let bestEfficiency = 0;

  for (const state of dp) {
    if (state.efficiency > bestEfficiency) {
      bestEfficiency = state.efficiency;
      bestCombination = state.indices;
    }
  }

  return bestCombination;
}

/**
 * Pack using Best Fit Decreasing with rotation optimization
 */
function packByBestFitDecreasing(
  parts: InputRectangle[],
  sheetWidth: number,
  sheetHeight: number,
  kerf: number
): PackingResult {
  const placed: Rectangle[] = [];
  const sortedParts = [...parts].sort((a, b) => {
    const areaA = a.width * a.height;
    const areaB = b.width * b.height;
    if (areaA !== areaB) return areaB - areaA;
    // Secondary sort by perimeter for tie-breaking
    const perimeterA = 2 * (a.width + a.height);
    const perimeterB = 2 * (b.width + b.height);
    return perimeterB - perimeterA;
  });

  for (const part of sortedParts) {
    const position = findBestFitPositionWithRotation(part, placed, sheetWidth, sheetHeight, kerf);
    if (position) {
      placed.push({
        ...part,
        x: position.x,
        y: position.y,
        width: position.width,
        height: position.height
      });
    }
  }

  const usedArea = placed.reduce((sum, rect) => sum + rect.width * rect.height, 0);
  const totalArea = sheetWidth * sheetHeight;
  const efficiency = (usedArea / totalArea) * 100;

  return { placed, efficiency, waste: totalArea - usedArea };
}

/**
 * Find best fit position with intelligent rotation choice
 */
function findBestFitPositionWithRotation(
  part: InputRectangle,
  placed: Rectangle[],
  sheetWidth: number,
  sheetHeight: number,
  kerf: number
): { x: number; y: number; width: number; height: number } | null {
  const orientations = [
    { width: part.width, height: part.height, rotated: false },
    { width: part.height, height: part.width, rotated: true }
  ];

  let bestPosition: { x: number; y: number; width: number; height: number } | null = null;
  let bestScore = Infinity;

  for (const orientation of orientations) {
    const adjustedWidth = orientation.width + kerf;
    const adjustedHeight = orientation.height + kerf;

    if (adjustedWidth > sheetWidth || adjustedHeight > sheetHeight) continue;

    const candidates = generateSmartCandidatePositions(
      adjustedWidth, 
      adjustedHeight, 
      placed, 
      sheetWidth, 
      sheetHeight
    );

    for (const candidate of candidates) {
      const testRect = { 
        x: candidate.x, 
        y: candidate.y, 
        width: adjustedWidth, 
        height: adjustedHeight 
      };
      
      if (!hasCollision(testRect, placed, kerf)) {
        const score = calculateAdvancedPositionScore(
          candidate.x, 
          candidate.y, 
          adjustedWidth, 
          adjustedHeight, 
          placed, 
          sheetWidth, 
          sheetHeight,
          orientation.rotated
        );
        
        if (score < bestScore) {
          bestScore = score;
          bestPosition = {
            x: candidate.x,
            y: candidate.y,
            width: orientation.width,
            height: orientation.height
          };
        }
      }
    }
  }

  return bestPosition;
}

/**
 * Generate smarter candidate positions using skyline and corner analysis
 */
function generateSmartCandidatePositions(
  width: number,
  height: number,
  placed: Rectangle[],
  sheetWidth: number,
  sheetHeight: number
): Array<{ x: number; y: number }> {
  const candidates: Set<string> = new Set();
  
  // Always try origin
  candidates.add('0,0');

  // Generate skyline-based positions
  const skylinePoints = generateSkylinePoints(placed, sheetWidth);
  for (const point of skylinePoints) {
    if (point.x + width <= sheetWidth && point.y + height <= sheetHeight) {
      candidates.add(`${point.x},${point.y}`);
    }
  }

  // Generate corner-based positions
  for (const rect of placed) {
    // All four corners of each rectangle
    const corners = [
      { x: rect.x + rect.width, y: rect.y },
      { x: rect.x, y: rect.y + rect.height },
      { x: rect.x + rect.width, y: rect.y + rect.height },
      { x: rect.x, y: rect.y }
    ];

    for (const corner of corners) {
      if (corner.x + width <= sheetWidth && corner.y + height <= sheetHeight) {
        candidates.add(`${corner.x},${corner.y}`);
      }
    }
  }

  return Array.from(candidates).map(coord => {
    const [x, y] = coord.split(',').map(Number);
    return { x, y };
  });
}

/**
 * Generate skyline points for more intelligent positioning
 */
function generateSkylinePoints(
  placed: Rectangle[],
  sheetWidth: number
): Array<{ x: number; y: number }> {
  const events: Array<{ x: number; type: 'start' | 'end', height: number }> = [];
  
  for (const rect of placed) {
    events.push({ x: rect.x, type: 'start', height: rect.y + rect.height });
    events.push({ x: rect.x + rect.width, type: 'end', height: rect.y + rect.height });
  }

  events.sort((a, b) => a.x - b.x || (a.type === 'start' ? -1 : 1));

  const skylinePoints: Array<{ x: number; y: number }> = [];
  const activeHeights: number[] = [];
  let currentHeight = 0;

  for (const event of events) {
    if (event.type === 'start') {
      activeHeights.push(event.height);
    } else {
      const index = activeHeights.indexOf(event.height);
      if (index !== -1) {
        activeHeights.splice(index, 1);
      }
    }

    const newHeight = activeHeights.length > 0 ? Math.max(...activeHeights) : 0;
    
    if (newHeight !== currentHeight) {
      skylinePoints.push({ x: event.x, y: newHeight });
      currentHeight = newHeight;
    }
  }

  return skylinePoints;
}

/**
 * Calculate advanced position score with more sophisticated metrics
 */
function calculateAdvancedPositionScore(
  x: number,
  y: number,
  width: number,
  height: number,
  placed: Rectangle[],
  sheetWidth: number,
  sheetHeight: number,
  rotated: boolean
): number {
  let score = 0;

  // Basic bottom-left preference
  score += y * 100 + x * 10;

  // Rotation penalty (prefer non-rotated when possible)
  if (rotated) score += 50;

  // Compactness bonus - prefer positions that increase density
  const compactnessBonus = calculateCompactnessBonus(x, y, width, height, placed);
  score -= compactnessBonus * 30;

  // Edge alignment bonus
  const edgeAlignmentBonus = calculateEdgeAlignmentBonus(x, y, width, height, placed, sheetWidth, sheetHeight);
  score -= edgeAlignmentBonus * 20;

  // Fragmentation penalty
  const fragmentationPenalty = calculateFragmentationPenalty(x, y, width, height, placed, sheetWidth, sheetHeight);
  score += fragmentationPenalty * 40;

  return score;
}

/**
 * Calculate compactness bonus - reward positions that increase overall density
 */
function calculateCompactnessBonus(
  x: number,
  y: number,
  width: number,
  height: number,
  placed: Rectangle[]
): number {
  if (placed.length === 0) return 0;

  // Calculate bounding box before and after
  let minX = Math.min(x, ...placed.map(r => r.x));
  let minY = Math.min(y, ...placed.map(r => r.y));
  let maxX = Math.max(x + width, ...placed.map(r => r.x + r.width));
  let maxY = Math.max(y + height, ...placed.map(r => r.y + r.height));

  const newBoundingArea = (maxX - minX) * (maxY - minY);
  
  // Calculate current bounding box
  minX = Math.min(...placed.map(r => r.x));
  minY = Math.min(...placed.map(r => r.y));
  maxX = Math.max(...placed.map(r => r.x + r.width));
  maxY = Math.max(...placed.map(r => r.y + r.height));
  
  const currentBoundingArea = (maxX - minX) * (maxY - minY);
  
  // Return bonus based on how little the bounding area increases
  const areaIncrease = newBoundingArea - currentBoundingArea;
  return Math.max(0, 10000 - areaIncrease);
}

/**
 * Calculate edge alignment bonus
 */
function calculateEdgeAlignmentBonus(
  x: number,
  y: number,
  width: number,
  height: number,
  placed: Rectangle[],
  sheetWidth: number,
  sheetHeight: number
): number {
  let bonus = 0;

  // Sheet edge alignment
  if (x === 0) bonus += 10;
  if (y === 0) bonus += 10;
  if (x + width === sheetWidth) bonus += 10;
  if (y + height === sheetHeight) bonus += 10;

  // Alignment with existing rectangles
  for (const rect of placed) {
    if (Math.abs(x - rect.x) < 0.1) bonus += 5;
    if (Math.abs(y - rect.y) < 0.1) bonus += 5;
    if (Math.abs(x + width - (rect.x + rect.width)) < 0.1) bonus += 5;
    if (Math.abs(y + height - (rect.y + rect.height)) < 0.1) bonus += 5;
  }

  return bonus;
}

/**
 * Calculate fragmentation penalty
 */
function calculateFragmentationPenalty(
  x: number,
  y: number,
  width: number,
  height: number,
  placed: Rectangle[],
  sheetWidth: number,
  sheetHeight: number
): number {
  // Simple implementation - could be enhanced
  // Penalize positions that create many small unusable areas
  
  const adjacentSpaces = [
    { x: x - 1, y: y, width: 1, height: height }, // left
    { x: x + width, y: y, width: 1, height: height }, // right
    { x: x, y: y - 1, width: width, height: 1 }, // bottom
    { x: x, y: y + height, width: width, height: 1 } // top
  ];

  let penalty = 0;
  for (const space of adjacentSpaces) {
    if (space.x >= 0 && space.y >= 0 && 
        space.x + space.width <= sheetWidth && 
        space.y + space.height <= sheetHeight) {
      
      let occupied = false;
      for (const rect of placed) {
        if (!(space.x + space.width <= rect.x || 
              rect.x + rect.width <= space.x || 
              space.y + space.height <= rect.y || 
              rect.y + rect.height <= space.y)) {
          occupied = true;
          break;
        }
      }
      
      if (!occupied) {
        penalty += space.width * space.height;
      }
    }
  }

  return penalty;
}

/**
 * Find best fit position (fallback method)
 */
function findBestFitPosition(
  part: InputRectangle,
  placed: Rectangle[],
  sheetWidth: number,
  sheetHeight: number,
  kerf: number
): { x: number; y: number; width: number; height: number } | null {
  return findBestFitPositionWithRotation(part, placed, sheetWidth, sheetHeight, kerf);
}

/**
 * Check if two rectangles collide (FIXED: Now properly handles kerf thickness)
 */
function hasCollision(
  rect1: { x: number; y: number; width: number; height: number },
  placedRects: Array<{ x: number; y: number; width: number; height: number }>,
  kerfThickness: number = 0
): boolean {
  for (const rect2 of placedRects) {
    // CRITICAL FIX: Add kerf thickness to rect1 (new part being placed) for proper spacing
    const r1WithKerf = {
      x: rect1.x,
      y: rect1.y,
      width: rect1.width + kerfThickness,
      height: rect1.height + kerfThickness
    };
    
    if (!(r1WithKerf.x + r1WithKerf.width <= rect2.x || 
          rect2.x + rect2.width <= r1WithKerf.x || 
          r1WithKerf.y + r1WithKerf.height <= rect2.y || 
          rect2.y + rect2.height <= r1WithKerf.y)) {
      return true; // Collision detected (including kerf spacing)
    }
  }
  return false;
}

/**
 * Calculate optimal layout with detailed metrics
 */
export function calculateOptimalLayout(
  parts: Rectangle[],
  sheetWidth: number,
  sheetHeight: number,
  kerf: number = 0
): PackingResult & { algorithm: string; unusedParts: Rectangle[] } {
  const result = hybridPacking(parts, sheetWidth, sheetHeight, kerf);
  const unusedParts = parts.filter(part => 
    !result.placed.some(placed => placed.id === part.id)
  );

  return {
    ...result,
    algorithm: 'hybrid',
    unusedParts
  };
}
