// This script sets up the D1 database binding for local development
// It will be run by the Next.js server when in development mode

// Import the local database implementation
import { localDB } from './local-db';

// Set up a global.d.ts file to extend the global scope with our D1 binding
declare global {
  var DB: any;
}

// Export a function to bind the D1 database
export async function setupD1Binding() {
  try {
    console.log('Setting up D1 database binding for local development');
    
    // If DB is already set up, don't override it
    if (typeof globalThis.DB !== 'undefined') {
      console.log('D1 database binding already exists');
      return true;
    }
    
    // In development mode, we'll use a direct pass-through to our local database
    // This makes all D1 database operations go directly to our localStorage-based DB
    globalThis.DB = {
      prepare: (query: string) => {
        console.log(`[DB Setup] Query: ${query}`);
        
        // Simple query parser to mimic basic SQL functionality
        const isSelect = query.trim().toUpperCase().startsWith('SELECT');
        const isInsert = query.trim().toUpperCase().startsWith('INSERT');
        const isUpdate = query.trim().toUpperCase().startsWith('UPDATE');
        const isDelete = query.trim().toUpperCase().startsWith('DELETE');
        
        return {
          bind: (...params: any[]) => {
            console.log(`[DB Setup] Params:`, params);
            
            return {
              all: async () => {
                console.log('[DB Setup] Executing .all()');
                
                if (isSelect && query.includes('calculations')) {
                  const calculations = await localDB.getAllCalculations();
                  // Convert from app format to DB format for the mock D1 API
                  const results = calculations.map(calc => ({
                    id: calc.id,
                    name: calc.name,
                    description: calc.description,
                    kerf_thickness: calc.kerfThickness,
                    available_stocks: JSON.stringify(calc.availableStocks),
                    required_parts: JSON.stringify(calc.requiredParts),
                    results: calc.results ? JSON.stringify(calc.results) : null,
                    date_created: calc.dateCreated,
                    date_modified: calc.dateModified,
                    user_id: null // No user system yet
                  }));
                  return { results };
                }
                
                return { results: [] };
              },
              first: async () => {
                console.log('[DB Setup] Executing .first()');
                
                if (isSelect && query.includes('calculations') && query.includes('WHERE id = ?')) {
                  const id = params[0];
                  const calculation = await localDB.getCalculation(id);
                  
                  if (!calculation) return null;
                  
                  // Convert from app format to DB format
                  return {
                    id: calculation.id,
                    name: calculation.name,
                    description: calculation.description,
                    kerf_thickness: calculation.kerfThickness,
                    available_stocks: JSON.stringify(calculation.availableStocks),
                    required_parts: JSON.stringify(calculation.requiredParts),
                    results: calculation.results ? JSON.stringify(calculation.results) : null,
                    date_created: calculation.dateCreated,
                    date_modified: calculation.dateModified,
                    user_id: null // No user system yet
                  };
                }
                
                return null;
              },
              run: async () => {
                console.log('[DB Setup] Executing .run()');
                
                // Insert operation
                if (isInsert && query.includes('calculations')) {
                  const calculation = {
                    id: params[0],
                    name: params[1],
                    description: params[2] || '',
                    kerfThickness: params[3],
                    availableStocks: JSON.parse(params[4]),
                    requiredParts: JSON.parse(params[5]),
                    results: params[6] ? JSON.parse(params[6]) : null,
                    dateCreated: params[7],
                    dateModified: params[8]
                    // No user system yet
                  };
                  
                  const success = await localDB.createCalculation(calculation);
                  return { success, meta: { changes: success ? 1 : 0 } };
                }
                
                // Update operation
                if (isUpdate && query.includes('calculations')) {
                  const id = params[params.length - 1];
                  const calculation = {
                    id,
                    name: params[0],
                    description: params[1] || '',
                    kerfThickness: params[2],
                    availableStocks: JSON.parse(params[3]),
                    requiredParts: JSON.parse(params[4]),
                    results: params[5] ? JSON.parse(params[5]) : null,
                    dateCreated: 0, // This will be filled in by the update operation
                    dateModified: params[6]
                    // No user system yet
                  };
                  
                  // Get the existing calculation to preserve dateCreated
                  const existing = await localDB.getCalculation(id);
                  if (existing) {
                    calculation.dateCreated = existing.dateCreated;
                  }
                  
                  const success = await localDB.updateCalculation(calculation);
                  return { success, meta: { changes: success ? 1 : 0 } };
                }
                
                // Delete operations
                if (isDelete) {
                  if (query.includes('calculations WHERE id = ?')) {
                    const id = params[0];
                    const success = await localDB.deleteCalculation(id);
                    return { success, meta: { changes: success ? 1 : 0 } };
                  }
                  
                  if (query.includes('calculations') && !query.includes('WHERE')) {
                    const success = await localDB.deleteAllCalculations();
                    return { success, meta: { changes: success ? 1 : 0 } };
                  }
                }
                
                return { success: true, meta: { changes: 0 } };
              }
            };
          },
          all: async () => {
            console.log('[DB Setup] Executing .all() without bind');
            
            if (isSelect && query.includes('calculations')) {
              const calculations = await localDB.getAllCalculations();
              // Convert from app format to DB format for the mock D1 API
              const results = calculations.map(calc => ({
                id: calc.id,
                name: calc.name,
                description: calc.description,
                kerf_thickness: calc.kerfThickness,
                available_stocks: JSON.stringify(calc.availableStocks),
                required_parts: JSON.stringify(calc.requiredParts),
                results: calc.results ? JSON.stringify(calc.results) : null,
                date_created: calc.dateCreated,
                date_modified: calc.dateModified,
                user_id: null // No user system yet
              }));
              return { results };
            }
            
            if (isSelect && query.includes('warehouse_stock')) {
              const stockItems = await localDB.getAllWarehouseStock();
              // Convert from app format to DB format for the mock D1 API
              const results = stockItems.map(stock => ({
                id: stock.id,
                length: stock.length,
                width: stock.width,
                thickness: stock.thickness,
                quantity: stock.quantity,
                material: stock.material,
                location: stock.location,
                date_added: stock.dateAdded,
                date_modified: stock.dateModified,
                user_id: null // No user system yet
              }));
              return { results };
            }
            
            return { results: [] };
          },
          first: async () => {
            console.log('[DB Setup] Executing .first() without bind');
            return null;
          },
          run: async () => {
            console.log('[DB Setup] Executing .run() without bind');
            return { success: true, meta: { changes: 0 } };
          }
        };
      }
    };
    
    console.log('D1 database binding set up successfully');
    return true;
  } catch (error) {
    console.error('Error setting up D1 database binding:', error);
    return false;
  }
}
